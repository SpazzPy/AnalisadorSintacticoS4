Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS term
Rule 2     expression -> expression MINUS term
Rule 3     expression -> term
Rule 4     term -> term TIMES factor
Rule 5     term -> term DIVIDE factor
Rule 6     term -> factor
Rule 7     factor -> factor EXP unary
Rule 8     factor -> unary
Rule 9     unary -> MINUS unary
Rule 10    unary -> NUMBER
Rule 11    unary -> LPAREN expression RPAREN
Rule 12    unary -> NUMBER LPAREN expression RPAREN

Terminals, with rules where they appear

DIVIDE               : 5
EXP                  : 7
LPAREN               : 11 12
MINUS                : 2 9
NUMBER               : 10 12
PLUS                 : 1
RPAREN               : 11 12
TIMES                : 4
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 11 12 0
factor               : 4 5 6 7
term                 : 1 2 3 4 5
unary                : 7 8 9

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . factor EXP unary
    (8) factor -> . unary
    (9) unary -> . MINUS unary
    (10) unary -> . NUMBER
    (11) unary -> . LPAREN expression RPAREN
    (12) unary -> . NUMBER LPAREN expression RPAREN

    MINUS           shift and go to state 3
    NUMBER          shift and go to state 6
    LPAREN          shift and go to state 7

    expression                     shift and go to state 1
    term                           shift and go to state 2
    factor                         shift and go to state 4
    unary                          shift and go to state 5

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    PLUS            shift and go to state 8
    MINUS           shift and go to state 9


state 2

    (3) expression -> term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

    PLUS            reduce using rule 3 (expression -> term .)
    MINUS           reduce using rule 3 (expression -> term .)
    $end            reduce using rule 3 (expression -> term .)
    RPAREN          reduce using rule 3 (expression -> term .)
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 3

    (9) unary -> MINUS . unary
    (9) unary -> . MINUS unary
    (10) unary -> . NUMBER
    (11) unary -> . LPAREN expression RPAREN
    (12) unary -> . NUMBER LPAREN expression RPAREN

    MINUS           shift and go to state 3
    NUMBER          shift and go to state 6
    LPAREN          shift and go to state 7

    unary                          shift and go to state 12

state 4

    (6) term -> factor .
    (7) factor -> factor . EXP unary

    TIMES           reduce using rule 6 (term -> factor .)
    DIVIDE          reduce using rule 6 (term -> factor .)
    PLUS            reduce using rule 6 (term -> factor .)
    MINUS           reduce using rule 6 (term -> factor .)
    $end            reduce using rule 6 (term -> factor .)
    RPAREN          reduce using rule 6 (term -> factor .)
    EXP             shift and go to state 13


state 5

    (8) factor -> unary .

    EXP             reduce using rule 8 (factor -> unary .)
    TIMES           reduce using rule 8 (factor -> unary .)
    DIVIDE          reduce using rule 8 (factor -> unary .)
    PLUS            reduce using rule 8 (factor -> unary .)
    MINUS           reduce using rule 8 (factor -> unary .)
    $end            reduce using rule 8 (factor -> unary .)
    RPAREN          reduce using rule 8 (factor -> unary .)


state 6

    (10) unary -> NUMBER .
    (12) unary -> NUMBER . LPAREN expression RPAREN

    EXP             reduce using rule 10 (unary -> NUMBER .)
    TIMES           reduce using rule 10 (unary -> NUMBER .)
    DIVIDE          reduce using rule 10 (unary -> NUMBER .)
    PLUS            reduce using rule 10 (unary -> NUMBER .)
    MINUS           reduce using rule 10 (unary -> NUMBER .)
    $end            reduce using rule 10 (unary -> NUMBER .)
    RPAREN          reduce using rule 10 (unary -> NUMBER .)
    LPAREN          shift and go to state 14


state 7

    (11) unary -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . factor EXP unary
    (8) factor -> . unary
    (9) unary -> . MINUS unary
    (10) unary -> . NUMBER
    (11) unary -> . LPAREN expression RPAREN
    (12) unary -> . NUMBER LPAREN expression RPAREN

    MINUS           shift and go to state 3
    NUMBER          shift and go to state 6
    LPAREN          shift and go to state 7

    expression                     shift and go to state 15
    term                           shift and go to state 2
    factor                         shift and go to state 4
    unary                          shift and go to state 5

state 8

    (1) expression -> expression PLUS . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . factor EXP unary
    (8) factor -> . unary
    (9) unary -> . MINUS unary
    (10) unary -> . NUMBER
    (11) unary -> . LPAREN expression RPAREN
    (12) unary -> . NUMBER LPAREN expression RPAREN

    MINUS           shift and go to state 3
    NUMBER          shift and go to state 6
    LPAREN          shift and go to state 7

    term                           shift and go to state 16
    factor                         shift and go to state 4
    unary                          shift and go to state 5

state 9

    (2) expression -> expression MINUS . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . factor EXP unary
    (8) factor -> . unary
    (9) unary -> . MINUS unary
    (10) unary -> . NUMBER
    (11) unary -> . LPAREN expression RPAREN
    (12) unary -> . NUMBER LPAREN expression RPAREN

    MINUS           shift and go to state 3
    NUMBER          shift and go to state 6
    LPAREN          shift and go to state 7

    term                           shift and go to state 17
    factor                         shift and go to state 4
    unary                          shift and go to state 5

state 10

    (4) term -> term TIMES . factor
    (7) factor -> . factor EXP unary
    (8) factor -> . unary
    (9) unary -> . MINUS unary
    (10) unary -> . NUMBER
    (11) unary -> . LPAREN expression RPAREN
    (12) unary -> . NUMBER LPAREN expression RPAREN

    MINUS           shift and go to state 3
    NUMBER          shift and go to state 6
    LPAREN          shift and go to state 7

    factor                         shift and go to state 18
    unary                          shift and go to state 5

state 11

    (5) term -> term DIVIDE . factor
    (7) factor -> . factor EXP unary
    (8) factor -> . unary
    (9) unary -> . MINUS unary
    (10) unary -> . NUMBER
    (11) unary -> . LPAREN expression RPAREN
    (12) unary -> . NUMBER LPAREN expression RPAREN

    MINUS           shift and go to state 3
    NUMBER          shift and go to state 6
    LPAREN          shift and go to state 7

    factor                         shift and go to state 19
    unary                          shift and go to state 5

state 12

    (9) unary -> MINUS unary .

    EXP             reduce using rule 9 (unary -> MINUS unary .)
    TIMES           reduce using rule 9 (unary -> MINUS unary .)
    DIVIDE          reduce using rule 9 (unary -> MINUS unary .)
    PLUS            reduce using rule 9 (unary -> MINUS unary .)
    MINUS           reduce using rule 9 (unary -> MINUS unary .)
    $end            reduce using rule 9 (unary -> MINUS unary .)
    RPAREN          reduce using rule 9 (unary -> MINUS unary .)


state 13

    (7) factor -> factor EXP . unary
    (9) unary -> . MINUS unary
    (10) unary -> . NUMBER
    (11) unary -> . LPAREN expression RPAREN
    (12) unary -> . NUMBER LPAREN expression RPAREN

    MINUS           shift and go to state 3
    NUMBER          shift and go to state 6
    LPAREN          shift and go to state 7

    unary                          shift and go to state 20

state 14

    (12) unary -> NUMBER LPAREN . expression RPAREN
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . factor EXP unary
    (8) factor -> . unary
    (9) unary -> . MINUS unary
    (10) unary -> . NUMBER
    (11) unary -> . LPAREN expression RPAREN
    (12) unary -> . NUMBER LPAREN expression RPAREN

    MINUS           shift and go to state 3
    NUMBER          shift and go to state 6
    LPAREN          shift and go to state 7

    expression                     shift and go to state 21
    term                           shift and go to state 2
    factor                         shift and go to state 4
    unary                          shift and go to state 5

state 15

    (11) unary -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    RPAREN          shift and go to state 22
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9


state 16

    (1) expression -> expression PLUS term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

    PLUS            reduce using rule 1 (expression -> expression PLUS term .)
    MINUS           reduce using rule 1 (expression -> expression PLUS term .)
    $end            reduce using rule 1 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS term .)
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 17

    (2) expression -> expression MINUS term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

    PLUS            reduce using rule 2 (expression -> expression MINUS term .)
    MINUS           reduce using rule 2 (expression -> expression MINUS term .)
    $end            reduce using rule 2 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS term .)
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 18

    (4) term -> term TIMES factor .
    (7) factor -> factor . EXP unary

    TIMES           reduce using rule 4 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 4 (term -> term TIMES factor .)
    PLUS            reduce using rule 4 (term -> term TIMES factor .)
    MINUS           reduce using rule 4 (term -> term TIMES factor .)
    $end            reduce using rule 4 (term -> term TIMES factor .)
    RPAREN          reduce using rule 4 (term -> term TIMES factor .)
    EXP             shift and go to state 13


state 19

    (5) term -> term DIVIDE factor .
    (7) factor -> factor . EXP unary

    TIMES           reduce using rule 5 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 5 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 5 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 5 (term -> term DIVIDE factor .)
    $end            reduce using rule 5 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 5 (term -> term DIVIDE factor .)
    EXP             shift and go to state 13


state 20

    (7) factor -> factor EXP unary .

    EXP             reduce using rule 7 (factor -> factor EXP unary .)
    TIMES           reduce using rule 7 (factor -> factor EXP unary .)
    DIVIDE          reduce using rule 7 (factor -> factor EXP unary .)
    PLUS            reduce using rule 7 (factor -> factor EXP unary .)
    MINUS           reduce using rule 7 (factor -> factor EXP unary .)
    $end            reduce using rule 7 (factor -> factor EXP unary .)
    RPAREN          reduce using rule 7 (factor -> factor EXP unary .)


state 21

    (12) unary -> NUMBER LPAREN expression . RPAREN
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    RPAREN          shift and go to state 23
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9


state 22

    (11) unary -> LPAREN expression RPAREN .

    EXP             reduce using rule 11 (unary -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 11 (unary -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 11 (unary -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 11 (unary -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 11 (unary -> LPAREN expression RPAREN .)
    $end            reduce using rule 11 (unary -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 11 (unary -> LPAREN expression RPAREN .)


state 23

    (12) unary -> NUMBER LPAREN expression RPAREN .

    EXP             reduce using rule 12 (unary -> NUMBER LPAREN expression RPAREN .)
    TIMES           reduce using rule 12 (unary -> NUMBER LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 12 (unary -> NUMBER LPAREN expression RPAREN .)
    PLUS            reduce using rule 12 (unary -> NUMBER LPAREN expression RPAREN .)
    MINUS           reduce using rule 12 (unary -> NUMBER LPAREN expression RPAREN .)
    $end            reduce using rule 12 (unary -> NUMBER LPAREN expression RPAREN .)
    RPAREN          reduce using rule 12 (unary -> NUMBER LPAREN expression RPAREN .)

